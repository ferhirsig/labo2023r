}
plot(1:10, wss, type = "b", xlab = "Number of Clusters",
ylab = "Suma de cuadrados dentro de los clusters (within)")
for (j in 1:9) {
nombregrafico <- paste0("c", j)
assign(
nombregrafico,
generar_boxplots_por_grupos(
df = df_to_cluster_mixto,
var_interes = vars_to_cluster[j]
)
)
}
plot_grid(c1, c2, c3, c4, c5, c6, c7, c8, c9, ncol = 3)
#¿ Qué características tienen los grupos formados?
groups                      <- cutree(fit, k = 5)
df_to_cluster_mixto$cluster <- groups
df$cluster_mixto            <- groups
for (j in 1:9) {
nombregrafico <- paste0("c", j)
assign(
nombregrafico,
generar_boxplots_por_grupos(
df = df_to_cluster_mixto,
var_interes = vars_to_cluster[j]
)
)
}
plot_grid(c1, c2, c3, c4, c5, c6, c7, c8, c9, ncol = 3)
table(df_to_cluster_mixto$cluster, df_to_cluster_mixto$publico)
table(df_to_cluster_mixto$cluster, df_to_cluster_mixto$marca)
table(df_to_cluster_mixto$cluster, df_to_cluster_mixto$paquete)
table(df$cluster, df$cluster_mixto)
df %>%
dplyr::select(cluster, cluster_mixto, id, nombre, marca) %>%
dplyr::arrange(cluster) %>%
kable()
df %>%
dplyr::select(cluster, cluster_mixto, id, nombre, marca) %>%
dplyr::arrange(cluster_mixto) %>%
kable()
library(devtools)
install_github("tiagomendesdantas/Rspotify")
findingregina<-searchArtist("La+cruda",token=keys)
install.packages("IRkernel")
library( "IRkernel" )
IRkernel::installspec()
library( "IRkernel" )
IRkernel::installspec()
quit()
library(data.table)
library(rpart)
library(rpart.plot)
e^x
2.71^x
e^1
e^1
2.71^1
2.71^1
2.71^2
2.71^3
I0228246 <- read.table("C:/Users/ferhi/Downloads/I0228246", encoding="UTF-8", quote="\"", comment.char="")
View(I0228246)
# Estilo para gráficos
theme_set(theme_bw() + theme(text = element_text(size = 10)))
mtcars %>%
select(mpg, drat, disp, wt) %>%
sample_n(5000) %>% # graficamos 5000 casos al azar
ggpairs()
mtcars <- mtcars
mtcars %>%
select(mpg, drat, disp, wt) %>%
sample_n(5000) %>% # graficamos 5000 casos al azar
ggpairs()
library(dplyr)
library(ggplot2)
library(tidyr)
library(alr4)
library(ISLR)
library(GGally)
library(car)
library(cowplot)
mtcars <- mtcars
mtcars %>%
select(mpg, drat, disp, wt) %>%
sample_n(5000) %>% # graficamos 5000 casos al azar
ggpairs()
install.packages("alr4")
install.packages("alr4")
mtcars <- mtcars
mtcars %>%
select(mpg, drat, disp, wt) %>%
#sample_n(5000) %>% # graficamos 5000 casos al azar
ggpairs()
mod_ddw <- lm(mpg ~ drat + disp + wt, data = mtcars)
summary(mod_ddw)
coef(mod_ddw)
confint(mod_ddw)
vcov(mod_ddw)
summary(mod_ddw)$r.squared
summary(mod_ddw)$sigma
deviance(mod_ddw) #sce
anova(mod_ddw)
n <- nrow(mtcars)
# SCT = (n-1) * variancia de y
sct <- (n - 1) * var(mtcars$mpg)
# Modelo bajo H0, sin covariables
mod0 <- lm(mpg ~ 1, mtcars)
# Con la función anova, comparo dos modelos mediante el test F
anova(mod0, mod_cdt)
#Manipulación de Datos
library(dplyr)
library(tidyr)
library(broom)
#Gráficos
library(ggplot2)
library(cowplot)  #no es indispensable
library(plotly)   #no es indispensable
#Datasets
library(UsingR)
# Estilo de gráficos
theme_set(theme_bw() + theme(text = element_text(size = 10)))
install.packages("UsingR")
#Manipulación de Datos
library(dplyr)
library(tidyr)
library(broom)
#Gráficos
library(ggplot2)
library(cowplot)  #no es indispensable
library(plotly)   #no es indispensable
#Datasets
library(UsingR)
# Estilo de gráficos
theme_set(theme_bw() + theme(text = element_text(size = 10)))
ggplot(diamond) +
aes(x = carat, y = price) +
geom_point()
set.seed(109)
rectas <- tibble(
b0 = runif(min = -1000, max = 1500, n = 250),
b1 = runif(min = -10000, max = 5000, n = 250)
)
View(rectas)
ggplot(data = diamond) +
aes(x = carat, y = price) +
geom_abline(aes(intercept = b0, slope = b1), data = rectas, alpha = 1/4) +
geom_point()
# Coeficientes de la recta
b0 <- -500
b1 <- 5000
# Diferencias
diferencias <- diamond$price - (b0 + b1 * diamond$carat)
round(diferencias)
sum(diferencias^2)
calcular_q <- function(b0, b1, x, y) {
diferencias <- y - (b0 + b1 * x)
sum(diferencias^2)
}
rectas$q <- mapply(
calcular_q,
rectas$b0,
rectas$b1,
MoreArgs = list(x = diamond$carat, y = diamond$price)
)
View(rectas)
ggplot(data = diamond) +
aes(x = carat, y = price) +
geom_abline(aes(intercept = b0, slope = b1, color = q),
data = filter(rectas, rank(q) <= 10)) +
geom_point() +
scale_color_continuous(low = "green", high = "red")
grilla <- expand.grid(
b0 = seq(-400, -100, length = 50),
b1 = seq(2500, 4900, length = 50)
)
grilla$q <- mapply(calcular_q, grilla$b0, grilla$b1,
MoreArgs = list(x = diamond$carat, y = diamond$price))
head(grilla)
plot_ly(
x = unique(grilla$b0),
y = unique(grilla$b1),
z = matrix(grilla$q, nrow = 50, byrow = T), # tiene que ser matriz
type = "surface") %>%
layout(
scene = list(
xaxis = list(title = "b0"),
yaxis = list(title = "b1"),
zaxis = list(title = "q"),
dragmode = "turntable"
)) %>%
add_surface(
contours = list(
z = list(
show=TRUE,
usecolormap=TRUE,
highlightcolor="#ff0000",
project=list(z=TRUE)
)
)
)
lm(y1 ~ x1, anscombe)
mos <- lm(y1 ~ x1, anscombe)
mos
mod <- lm(y1 ~ x1, anscombe)
summary(mod)$r.squared
View(mod)
mod <- lm(price ~ carat, diamond)
coefficients(mod)
vcov(mod)
summary(mod)
predict(mod) %>% head() # vemos sólo los primeros
# SCE
sce <- sum((diamond$price - predict(mod))^2)
sce
# Sigma estimado (el que aparece en summary como Residual standard error)
s <- sqrt(cme)
s
deviance(mod)
# CME
n <- nrow(diamond)
cme <- sce / (n - 2)
cme
# Sigma estimado (el que aparece en summary como Residual standard error)
s <- sqrt(cme)
s
confint(mod)
# Cálculo para todos los x del dataset original:
ic <- predict(mod, interval = "confidence")
head(cbind(diamond, ic))
View(ic)
# O para algunos valores de interés:
valores <- data.frame(carat = c(0.1, 0.2, 0.3))
ic <- predict(mod, newdata = valores, interval = "confidence")
cbind(valores, ic)
ip <- predict(mod, newdata = valores, interval = "prediction")
cbind(valores, ip)
View(ip)
anscombe
mod <- lm(y1 ~ x1, anscombe)
mod2 <- lm(y2 ~ x2, anscombe)
summary(mod)$r.squared)
summary(mod)$r.squared
summary(mod2)$r.squared
cor(anscombe$y1, anscombe$x1)^2
#Manipulación de Datos
library(dplyr)
library(tidyr)
library(broom)
#Gráficos
library(ggplot2)
library(cowplot)  #no es indispensable
library(plotly)   #no es indispensable
#Datasets
library(UsingR)
# Estilo de gráficos
theme_set(theme_bw() + theme(text = element_text(size = 10)))
mod <- lm(mpg ~ drat, mtcars)
ggplot(data = mtcars) +
aes(x = mpg, y = drat) +
#geom_abline(aes(intercept = b0, slope = b1, color = q),
# data = filter(rectas, rank(q) <= 10)) +
geom_point() +
scale_color_continuous(low = "green", high = "red")
ggplot(data = mtcars) +
aes(x = mpg, y = drat) +
geom_abline(aes(intercept = b0, slope = b1, color = q),
data = filter(rectas, rank(q) <= 10)) +
geom_point() +
scale_color_continuous(low = "green", high = "red")
ggplot(data = mtcars) +
aes(x = mpg, y = drat) +
geom_point()+
geom_abline()
ggplot(data = mtcars) +
aes(x = mpg, y = drat) +
geom_point()+
geom_abline(regresion)
ggplot(data = mtcars) +
aes(x = mpg, y = drat) +
geom_point()+
geom_smooth()
ggplot(data = mtcars) +
aes(x = mpg, y = drat) +
geom_point()+
geom_smooth(method = "lm")
summary(mod)
coefficients(mod)
confint(mod)
ggplot(mtcars) +
aes(x = drat, y = mpg) +
geom_point() +
stat_smooth(method = "lm", se = F)
valores <- tibble(drat = seq(2.75, 5, length.out = 100))
View(valores)
predict(mod, newdata = valores, interval = "confidence")[, 1]
valores$fit <- predict(mod, newdata = valores, interval = "confidence")[, 1]
valores <- tibble(drat = seq(2.75, 5, length.out = 100))
valores$fit <- predict(mod, newdata = valores, interval = "confidence")[, 1]
valores$conf_inf <- predict(mod, newdata = valores, interval = "confidence")[, 2]
valores$conf_sup <- predict(mod, newdata = valores, interval = "confidence")[, 3]
valores$pred_inf <- predict(mod, newdata = valores, interval = "prediction")[, 2]
valores$pred_sup <- predict(mod, newdata = valores, interval = "prediction")[, 3]
ggplot(valores) +
aes(x = drat, y = fit) +
stat_smooth(method = "lm", se = FALSE) +
geom_ribbon(aes(ymin = pred_inf, ymax = pred_sup,
col = "Predicción", fill = "Predicción"), alpha = 0.4)
ggplot(valores) +
aes(x = drat, y = fit) +
stat_smooth(method = "lm", se = FALSE) +
geom_ribbon(aes(ymin = pred_inf, ymax = pred_sup,
col = "Predicción", fill = "Predicción"), alpha = 0.4) +
geom_ribbon(aes(ymin = conf_inf, ymax = conf_sup,
col = "Confianza", fill = "Confianza"), alpha = 0.4) +
ggplot(valores) +
aes(x = drat, y = fit) +
stat_smooth(method = "lm", se = FALSE) +
geom_ribbon(aes(ymin = pred_inf, ymax = pred_sup,
col = "Predicción", fill = "Predicción"), alpha = 0.4) +
geom_ribbon(aes(ymin = conf_inf, ymax = conf_sup,
col = "Confianza", fill = "Confianza"), alpha = 0.4) +
geom_point(aes(y = mpg), data = mtcars) +
labs(color = "", fill = "", y = "mpg")
ggplot(valores) +
aes(x = drat, y = fit) +
stat_smooth(method = "lm", se = FALSE) +
geom_ribbon(aes(ymin = pred_inf, ymax = pred_sup,
col = "Predicción", fill = "Predicción"), alpha = 0.4) +
geom_ribbon(aes(ymin = conf_inf, ymax = conf_sup,
col = "Confianza", fill = "Confianza"), alpha = 0.4) +
geom_point(aes(y = mpg), data = mtcars) +
labs(color = "", fill = "", y = "mpg")
#Diamonds
(rxy <- cor(diamond$price, diamond$carat))
#Diamonds
rxy <- cor(diamond$price, diamond$carat)
#Diamonds
rxy <- cor(diamond$price, diamond$carat)
rxy
sy <- sd(diamond$price)
sx <- sd(diamond$carat)
rxy * sy / sx
lm(price ~ carat, diamond)
diamond <- mutate(diamond,
carat_desp = carat + 100,
carat_cen = carat - mean(carat),
price_cen = price - mean(price),
carat_mult = carat * 10,
carat_est = carat_cen / sd(carat),
price_est = price_cen / sd(price)
)
# Modelo original
mod1 <- lm(price ~ carat, diamond)
coefficients(mod1) %>% round(5)
# Desplazamiento en X cambia la ordenada, no la pendiente
mod2 <- lm(price ~ carat_desp, diamond)
coefficients(mod2) %>% round(5)
# Como el anterior, pero ahora la ordenada se interpreta como el valor esperado
# para un x promedio
mod3 <- lm(price ~ carat_cen, diamond)
coefficients(mod3) %>% round(5)
1.049e+05
1.049e+05
1.049e
1.049*e
1.049e+05
2.2e-16
2.2e-16
m1<- lm(Sepal.Length~ Sepal.Width, iris)
m2<- lm(Sepal.Length~ Petal.Length, iris)
m3<- lm(Sepal.Length~ Petal.Width, iris)
m4<- lm(Sepal.Length~ Sepal.Width + Petal.Length, iris)
m5<- lm(Sepal.Length~ Sepal.Width + Petal.Width, iris)
m6<- lm(Sepal.Length~ Petal.Length + Petal.Width, iris)
m7<- lm(Sepal.Length~ Sepal.Width + Petal.Length + Petal.Width, iris)
#cme
sigma(m1)2
#R2aj
summary(m1)$adj.r.squared
#PRESS
qpcR::PRESS(m1)$stat
#cp
olsrr::ols_mallows_cp(m1,m7)
#aic
extractAIC(m1)[2]
#bic
extractAIC(m1, k= nrow(iris))[2]
install.packages("qpcR")
install.packages("olsrr")
###modelo 1###
#cme
sigma(m1)^2
#cme
sigma(m1)^2
#R2aj
summary(m1)$adj.r.squared
#PRESS
qpcR::PRESS(m1)$stat
#cp
olsrr::ols_mallows_cp(m1,m7)
#aic
extractAIC(m1)[2]
#bic
extractAIC(m1, k= nrow(iris))[2]
#bic
extractAIC(m1, k= log(nrow(iris))[2]
#devolver
c(cme=cme, r2aj=r2aj, press=press, cp=cp, aic=aic, bic=bic)
}
sapply(list(m1,m2,m3,m4,m5,m6,m7), medidas, modmax=m7)
###modelo 1###
medidas <- function(m,modmax){
#cme
cme <- sigma(m1)^2
#R2aj
r2aj <- summary(m1)$adj.r.squared
#PRESS
press <- qpcR::PRESS(m1)$stat
#cp
cp <- olsrr::ols_mallows_cp(m1,m7)
#aic
aic <- extractAIC(m1)[2]
#bic
bic <- extractAIC(m1, k= log(nrow(iris))[2]
#devolver
c(cme=cme, r2aj=r2aj, press=press, cp=cp, aic=aic, bic=bic)
}
sapply(list(m1,m2,m3,m4,m5,m6,m7), medidas, modmax=m7)
###modelo 1###
medidas <- function(m,modmax){
sapply(list(m1,m2,m3,m4,m5,m6,m7), medidas, modmax=m7)
medidas <- function(m,modmax){
#cme
cme <- sigma(m1)^2
#R2aj
r2aj <- summary(m1)$adj.r.squared
#PRESS
press <- qpcR::PRESS(m1)$stat
#cp
cp <- olsrr::ols_mallows_cp(m1,m7)
#aic
aic <- extractAIC(m1)[2]
#bic
bic <- extractAIC(m1, k= log(nrow(iris))[2]
#devolver
c(cme=cme, r2aj=r2aj, press=press, cp=cp, aic=aic, bic=bic)
}
sapply(list(m1,m2,m3,m4,m5,m6,m7), medidas, modmax=m7)
sapply(list(m1,m2,m3,m4,m5,m6,m7), medidas, modmax=m7)
}
+52.14/201.23
cociente <- 52.14/201.23
1-cociente
sce <- 52.14
sct <- 201.23
cociente <- sce/sct
1-cociente
0.4*1.5
setwd("C:/MCD/Labo1")
library(data.table)
install.packages("datatable")
df<- read.csv("dataset/dataset_pequeño.csv")
library(readr)
dataset_pequeno <- read_csv("dataset/dataset_pequeno.csv")
View(dataset_pequeno)
names()
names(df)
colnames(df)
colnames(dataset_pequeno)
# Aqui se debe poner la carpeta de la materia de SU computadora local
setwd("C:\MCD\Labo1\dataset\\") # Establezco el Working Directory
# Aqui se debe poner la carpeta de la materia de SU computadora local
setwd("C:\MCD\Labo1\dataset\\") # Establezco el Working Directory
setwd("C:/MCD/Labo1/dataset")
# Aqui se debe poner la carpeta de la materia de SU computadora local
setwd("C:\MCD\Labo1\dataset\\") # Establezco el Working Directory
# Aqui se debe poner la carpeta de la materia de SU computadora local
setwd("C:MCD\Labo1\dataset\\") # Establezco el Working Directory
# Aqui se debe poner la carpeta de la materia de SU computadora local
setwd("C\\MCD\\Labo1\\dataset\\") # Establezco el Working Directory
# Aqui se debe poner la carpeta de la materia de SU computadora local
setwd("C/MCD/Labo1/dataset/") # Establezco el Working Directory
# Aqui se debe poner la carpeta de la materia de SU computadora local
setwd("C/MCD/Labo1/dataset") # Establezco el Working Directory
C/MCD/Labo1/dataset
# Aqui se debe poner la carpeta de la materia de SU computadora local
setwd("C:\MCD\Labo1\dataset") # Establezco el Working Directory
# Aqui se debe poner la carpeta de la materia de SU computadora local
setwd("C:/MCD/Labo1/dataset") # Establezco el Working Directory
# cargo el dataset
dataset <- fread("./datasets/dataset_pequeno.csv")
# Aqui se debe poner la carpeta de la materia de SU computadora local
setwd("C:/MCD/Labo1/dataset") # Establezco el Working Directory
# cargo el dataset
dataset <- fread("./datasets/dataset_pequeno.csv")
# cargo el dataset
dataset <- fread("./dataset/dataset_pequeno.csv")
dtrain <- dataset[foto_mes == 202107] # defino donde voy a entrenar
# cargo el dataset
dataset <- fread("./dataset/dataset_pequeno.csv")
dtrain <- dataset[foto_mes == 202107] # defino donde voy a entrenar
# cargo las librerias que necesito
require("data.table")
require("rpart")
require("rpart.plot")
# Aqui se debe poner la carpeta de la materia de SU computadora local
setwd("C:/MCD/Labo1/dataset") # Establezco el Working Directory
# cargo el dataset
dataset <- fread("./dataset/dataset_pequeno.csv")
dtrain <- dataset[foto_mes == 202107] # defino donde voy a entrenar
dapply <- dataset[foto_mes == 202109] # defino donde voy a aplicar el modelo
