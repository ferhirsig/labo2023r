list.files()
list.files("src")
list.files("workflow-semillerio")
list.files("workflow-semillerio")
list.files("src/workflow-inicial/")
> list.files("src/workflow-semillerio/")
> list.files("src/workflow-semillerio/")
list.files("src/workflow-semillerio/")
library(readr)
mi_dataset <- read_delim("bolog7511.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
library(readr)
mi_dataset <- read_delim("bolog7511.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
#-----------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------
library(dplyr)
BO_gcia_descendente <- mi_dataset %>% arrange(desc(ganancia))
# Ganancia más alta obtenida
maximo <- max(BO_gcia_descendente$ganancia)
maximo
posicion_ranking <- which(BO_gcia_descendente$ganancia == maximo)
posicion_ranking
# Ganancia mínima obtenida
minimo <- min(BO_gcia_descendente$ganancia)
minimo
posicion_ranking <- which(BO_gcia_descendente$ganancia == minimo)
posicion_ranking
#-----------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------
# Qué puesto ocupa la ganancia = 66.976.514
iteracion <- 16 # lo busco por N° de iteración dado que no reconoce la ganancia por los decimales, solución más simple
posicion_ranking <- which(BO_gcia_descendente$iteracion_bayesiana == 16)
posicion_ranking
# Resultado = 54, elijo éste por la cantidad de árboles
#-----------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------
# Qué puesto ocupa la ganancia = 67.896.919
iteracion <- 8 # lo busco por N° de iteración dado que no reconoce la ganancia por los decimales, solución más simple
posicion_ranking <- which(BO_gcia_descendente$iteracion_bayesiana == 8)
posicion_ranking
# Resultado = 47
# Cargamos el dataset o lo creamos si aún no está cargado
# mi_dataset <- read.csv("nombre_del_archivo.csv")  # Si los datos vienen desde un archivo CSV
# Supongamos que tienes el dataset cargado en una variable llamada mi_dataset
# Instala el paquete dplyr si aún no lo tienes instalado
# install.packages("dplyr")
# Cargar el paquete dplyr
library(dplyr)
# Supongamos que tienes el dataset cargado en una variable llamada mi_dataset
# Calcular la media de cada parámetro
media_learning_rate <- mean(mi_dataset$learning_rate)
media_feature_fraction <- mean(mi_dataset$feature_fraction)
media_num_leaves <- mean(mi_dataset$num_leaves)
media_min_data_in_leaf <- mean(mi_dataset$min_data_in_leaf)
# Definir la tolerancia para la comparación (por ejemplo, 0.01 para una tolerancia del 1%)
tolerancia <- 0.01
# Buscar las filas que contienen valores aproximados a la media de cada parámetro
fila_media_learning_rate <- which(near(mi_dataset$learning_rate, media_learning_rate, tol = tolerancia))
fila_media_feature_fraction <- which(near(mi_dataset$feature_fraction, media_feature_fraction, tol = tolerancia))
fila_media_num_leaves <- which(near(mi_dataset$num_leaves, media_num_leaves, tol = tolerancia))
fila_media_min_data_in_leaf <- which(near(mi_dataset$min_data_in_leaf, media_min_data_in_leaf, tol = tolerancia))
# Imprimir los resultados
print(paste("Fila con valor aproximado a la media de learning_rate:", fila_media_learning_rate))
print(paste("Fila con valor aproximado a la media de feature_fraction:", fila_media_feature_fraction))
print(paste("Fila con valor aproximado a la media de num_leaves:", fila_media_num_leaves))
print(paste("Fila con valor aproximado a la media de min_data_in_leaf:", fila_media_min_data_in_leaf))
library(readr)
mi_dataset <- read_delim("bo.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
#-----------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------
library(dplyr)
BO_gcia_descendente <- mi_dataset %>% arrange(desc(ganancia))
# Ganancia más alta obtenida
maximo <- max(BO_gcia_descendente$ganancia)
maximo
posicion_ranking <- which(BO_gcia_descendente$ganancia == maximo)
posicion_ranking
# Ganancia mínima obtenida
minimo <- min(BO_gcia_descendente$ganancia)
minimo
posicion_ranking <- which(BO_gcia_descendente$ganancia == minimo)
posicion_ranking
#-----------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------
# Qué puesto ocupa la ganancia = 66.976.514
iteracion <- 16 # lo busco por N° de iteración dado que no reconoce la ganancia por los decimales, solución más simple
posicion_ranking <- which(BO_gcia_descendente$iteracion_bayesiana == 16)
posicion_ranking
# Resultado = 54, elijo éste por la cantidad de árboles
#-----------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------
# Qué puesto ocupa la ganancia = 67.896.919
iteracion <- 8 # lo busco por N° de iteración dado que no reconoce la ganancia por los decimales, solución más simple
posicion_ranking <- which(BO_gcia_descendente$iteracion_bayesiana == 8)
posicion_ranking
# Resultado = 47
# Cargamos el dataset o lo creamos si aún no está cargado
# mi_dataset <- read.csv("nombre_del_archivo.csv")  # Si los datos vienen desde un archivo CSV
# Supongamos que tienes el dataset cargado en una variable llamada mi_dataset
# Instala el paquete dplyr si aún no lo tienes instalado
# install.packages("dplyr")
# Cargar el paquete dplyr
library(dplyr)
# Supongamos que tienes el dataset cargado en una variable llamada mi_dataset
# Calcular la media de cada parámetro
media_learning_rate <- mean(mi_dataset$learning_rate)
media_feature_fraction <- mean(mi_dataset$feature_fraction)
media_num_leaves <- mean(mi_dataset$num_leaves)
media_min_data_in_leaf <- mean(mi_dataset$min_data_in_leaf)
# Definir la tolerancia para la comparación (por ejemplo, 0.01 para una tolerancia del 1%)
tolerancia <- 0.01
# Buscar las filas que contienen valores aproximados a la media de cada parámetro
fila_media_learning_rate <- which(near(mi_dataset$learning_rate, media_learning_rate, tol = tolerancia))
fila_media_feature_fraction <- which(near(mi_dataset$feature_fraction, media_feature_fraction, tol = tolerancia))
fila_media_num_leaves <- which(near(mi_dataset$num_leaves, media_num_leaves, tol = tolerancia))
fila_media_min_data_in_leaf <- which(near(mi_dataset$min_data_in_leaf, media_min_data_in_leaf, tol = tolerancia))
# Imprimir los resultados
print(paste("Fila con valor aproximado a la media de learning_rate:", fila_media_learning_rate))
print(paste("Fila con valor aproximado a la media de feature_fraction:", fila_media_feature_fraction))
print(paste("Fila con valor aproximado a la media de num_leaves:", fila_media_num_leaves))
print(paste("Fila con valor aproximado a la media de min_data_in_leaf:", fila_media_min_data_in_leaf))
# Gráfico de dispersión para ver la ganancia en función de learning_rate y feature_fraction
ggplot(mi_dataset, aes(x = learning_rate, y = feature_fraction, color = ganancia)) +
geom_point() +
labs(title = "Ganancia en función de learning_rate y feature_fraction",
x = "Learning Rate",
y = "Feature Fraction",
color = "Ganancia")
# Cargar el paquete ggplot2
library(ggplot2)
ggplot(mi_dataset, aes(x = learning_rate, y = feature_fraction, color = ganancia)) +
geom_point() +
labs(title = "Ganancia en función de learning_rate y feature_fraction",
x = "Learning Rate",
y = "Feature Fraction",
color = "Ganancia")
ggplot(mi_dataset, aes(x = learning_rate, y = ganancia)) +
geom_point() +
labs(title = "Ganancia en función de learning_rate y feature_fraction",
x = "Learning Rate",
y = "Feature Fraction",
color = "Ganancia")
ggplot(mi_dataset, aes(x = learning_rate, y = ganancia)) +
geom_point() +
labs(title = "Ganancia en función de learning_rate",
x = "Ganancia",
y = "Learning Rate",
color = "Ganancia")
ggplot(mi_dataset, aes(x = learning_rate, y = ganancia)) +
geom_point() +
labs(title = "Ganancia en función de learning_rate",
y = "Ganancia",
x = "Learning Rate",
color = "Ganancia")
ggplot(mi_dataset, aes(x = num_leaves, y = min_data_in_leaf, z = ganancia)) +
geom_contour() +
labs(title = "Ganancia en función de num_leaves y min_data_in_leaf",
x = "Num Leaves",
y = "Min Data in Leaf",
z = "Ganancia")
ggplot(mi_dataset, aes(x = num_leaves, y = min_data_in_leaf, z = ganancia)) +
geom_contour() +
labs(title = "Ganancia en función de num_leaves y min_data_in_leaf",
x = "Num Leaves",
# Gráfico de dispersión para ver la ganancia en función de feature_fraction
ggplot(mi_dataset, aes(x = feature_fraction, y = ganancia)) +
geom_point() +
labs(title = "Ganancia en función de feature_fraction",
y = "Ganancia",
x = "feature_fraction",
color = "Ganancia")
ggplot(mi_dataset, aes(x = learning_rate, y = ganancia)) +
ggplot(mi_dataset, aes(x = learning_rate, y = ganancia)) +
geom_point() +
labs(title = "Ganancia en función de learning_rate",
y = "Ganancia",
x = "Learning Rate",
color = "Ganancia")
ggplot(mi_dataset, aes(x = learning_rate, y = ganancia)) +
geom_point() +
labs(title = "Ganancia en función de learning_rate",
y = "Ganancia",
x = "Learning Rate",
color = "Ganancia")
ggplot(mi_dataset, aes(x = feature_fraction, y = ganancia)) +
geom_point() +
labs(title = "Ganancia en función de feature_fraction",
y = "Ganancia",
x = "feature_fraction",
color = "Ganancia")
# Gráfico de dispersión para ver la ganancia en función de num_leaves
ggplot(mi_dataset, aes(x = num_leaves, y = ganancia)) +
geom_point() +
labs(title = "Ganancia en función de num_leaves",
y = "Ganancia",
x = "num_leaves",
color = "Ganancia")
# Gráfico de dispersión para ver la ganancia en función de min_data_in_leaf
ggplot(mi_dataset, aes(x = min_data_in_leaf, y = ganancia)) +
geom_point() +
labs(title = "Ganancia en función de min_data_in_leaf",
y = "Ganancia",
x = "min_data_in_leaf",
color = "Ganancia")
View(BO_gcia_descendente)
library(readr)
library(dplyr)
mi_dataset <- read_delim("bo.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
#---------------------------------------------
library(readr)
library(dplyr)
mi_dataset <- read_delim("bo.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
library(readr)
library(dplyr)
mi_dataset <- read_delim("bo.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE,
show_col_types = FALSE)
library(readr)
library(dplyr)
mi_dataset <- read_delim("bo.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE,
show_col_types = FALSE)
library(readr)
library(dplyr)
mi_dataset <- read_delim("bolog7510.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE,
show_col_types = FALSE)
library(dplyr)
library(readr)
mi_dataset <- read_delim("bolog7510.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
View(mi_dataset)
mi_dataset <- mi_dataset %>% arrange(desc(ganancia))
View(mi_dataset)
library(dplyr)
library(readr)
mi_dataset <- read_delim("bolog7510.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
mi_dataset <- mi_dataset %>% arrange(desc(ganancia))
max <- max(mi_dataset$ganancia)
posicion_ranking <- which(mi_dataset$ganancia == maximo)
posicion_ranking <- which(mi_dataset$ganancia == max)
min <- min(mi_dataset$ganancia)
posicion_ranking <- which(mi_dataset$ganancia == minimo)
posicion_ranking <- which(mi_dataset$ganancia == min)
View(mi_dataset)
mi_dataset <- mi_dataset %>% arrange(desc(ganancia))%>% mutate(posicion = row_number())
View(mi_dataset)
# Ganancia más alta obtenida
max <- max(mi_dataset$ganancia)
posicion_ranking <- which(mi_dataset$ganancia == max)
# Calcular la media de cada parámetro
media_learning_rate <- mean(mi_dataset$learning_rate)
media_feature_fraction <- mean(mi_dataset$feature_fraction)
media_num_leaves <- mean(mi_dataset$num_leaves)
media_min_data_in_leaf <- mean(mi_dataset$min_data_in_leaf)
# Definir la tolerancia para la comparación (por ejemplo, 0.01 para una tolerancia del 1%)
tolerancia <- 0.01
# Buscar las filas que contienen valores aproximados a la media de cada parámetro
fila_media_learning_rate <- which(near(mi_dataset$learning_rate, media_learning_rate, tol = tolerancia))
fila_media_feature_fraction <- which(near(mi_dataset$feature_fraction, media_feature_fraction, tol = tolerancia))
fila_media_num_leaves <- which(near(mi_dataset$num_leaves, media_num_leaves, tol = tolerancia))
fila_media_min_data_in_leaf <- which(near(mi_dataset$min_data_in_leaf, media_min_data_in_leaf, tol = tolerancia))
# Definir la tolerancia para la comparación (por ejemplo, 0.01 para una tolerancia del 1%)
tolerancia <- 0.05
fila_media_num_leaves <- which(near(mi_dataset$num_leaves, media_num_leaves, tol = tolerancia))
fila_media_min_data_in_leaf <- which(near(mi_dataset$min_data_in_leaf, media_min_data_in_leaf, tol = tolerancia))
# Definir la tolerancia para la comparación (por ejemplo, 0.01 para una tolerancia del 1%)
tolerancia <- 0.10
fila_media_num_leaves <- which(near(mi_dataset$num_leaves, media_num_leaves, tol = tolerancia))
fila_media_min_data_in_leaf <- which(near(mi_dataset$min_data_in_leaf, media_min_data_in_leaf, tol = tolerancia))
# Definir la tolerancia para la comparación (por ejemplo, 0.01 para una tolerancia del 1%)
tolerancia <- 0.2
# Buscar las filas que contienen valores aproximados a la media de cada parámetro
fila_media_learning_rate <- which(near(mi_dataset$learning_rate, media_learning_rate, tol = tolerancia))
fila_media_feature_fraction <- which(near(mi_dataset$feature_fraction, media_feature_fraction, tol = tolerancia))
fila_media_num_leaves <- which(near(mi_dataset$num_leaves, media_num_leaves, tol = tolerancia))
fila_media_min_data_in_leaf <- which(near(mi_dataset$min_data_in_leaf, media_min_data_in_leaf, tol = tolerancia))
# Definir la tolerancia para la comparación (por ejemplo, 0.01 para una tolerancia del 1%)
tolerancia <- 1
fila_media_num_leaves <- which(near(mi_dataset$num_leaves, media_num_leaves, tol = tolerancia))
fila_media_min_data_in_leaf <- which(near(mi_dataset$min_data_in_leaf, media_min_data_in_leaf, tol = tolerancia))
# Definir la tolerancia para la comparación (por ejemplo, 0.01 para una tolerancia del 1%)
tolerancia <- 0.01
# Buscar las filas que contienen valores aproximados a la media de cada parámetro
fila_media_learning_rate <- which(near(mi_dataset$learning_rate, media_learning_rate, tol = tolerancia))
fila_media_feature_fraction <- which(near(mi_dataset$feature_fraction, media_feature_fraction, tol = tolerancia))
fila_media_num_leaves <- which(near(mi_dataset$num_leaves, media_num_leaves, tol = tolerancia))
fila_media_min_data_in_leaf <- which(near(mi_dataset$min_data_in_leaf, media_min_data_in_leaf, tol = tolerancia))
# Imprimir los resultados
print(paste("Fila con valor aproximado a la media de learning_rate:", fila_media_learning_rate))
print(paste("Fila con valor aproximado a la media de feature_fraction:", fila_media_feature_fraction))
print(paste("Fila con valor aproximado a la media de num_leaves:", fila_media_num_leaves))
print(paste("Fila con valor aproximado a la media de min_data_in_leaf:", fila_media_min_data_in_leaf))
media_num_leaves <- mean(mi_dataset$num_leaves)
media_min_data_in_leaf <- mean(mi_dataset$min_data_in_leaf)
# Definir la tolerancia para la comparación (por ejemplo, 0.01 para una tolerancia del 1%)
tolerancia <- 35
fila_media_min_data_in_leaf <- which(near(mi_dataset$min_data_in_leaf, media_min_data_in_leaf, tol = tolerancia))
print(paste("Fila con valor aproximado a la media de num_leaves:", fila_media_num_leaves))
print(paste("Fila con valor aproximado a la media de num_leaves:", fila_media_num_leaves))
print(paste("Fila con valor aproximado a la media de min_data_in_leaf:", fila_media_min_data_in_leaf))
# Definir la tolerancia para la comparación (por ejemplo, 0.01 para una tolerancia del 1%)
tolerancia <- 30
fila_media_min_data_in_leaf <- which(near(mi_dataset$min_data_in_leaf, media_min_data_in_leaf, tol = tolerancia))
print(paste("Fila con valor aproximado a la media de min_data_in_leaf:", fila_media_min_data_in_leaf))
# Definir la tolerancia para la comparación (por ejemplo, 0.01 para una tolerancia del 1%)
tolerancia <- 0.01
# Buscar las filas que contienen valores aproximados a la media de cada parámetro
fila_media_learning_rate <- which(near(mi_dataset$learning_rate, media_learning_rate, tol = tolerancia))
fila_media_feature_fraction <- which(near(mi_dataset$feature_fraction, media_feature_fraction, tol = tolerancia))
fila_media_min_data_in_leaf <- which(near(mi_dataset$min_data_in_leaf, media_min_data_in_leaf, tol = 31))
fila_media_min_data_in_leaf <- which(near(mi_dataset$min_data_in_leaf, media_min_data_in_leaf, tol = 30))
fila_media_min_data_in_leaf <- which(near(mi_dataset$min_data_in_leaf, media_min_data_in_leaf, tol = 31))
fila_media_num_leaves <- which(near(mi_dataset$num_leaves, media_num_leaves, tol = 14))
library(dplyr)
library(readr)
mi_dataset <- read_delim("bolog7510.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
#-----------------------------------------------------------------------------------------------------------------------
mi_dataset <- mi_dataset %>% arrange(desc(ganancia))%>% mutate(posicion = row_number())
# Ganancia más alta obtenida
max <- max(mi_dataset$ganancia)
# Ganancia mínima obtenida
min <- min(mi_dataset$ganancia)
#-----------------------------------------------------------------------------------------------------------------------
# Calcular la media de cada parámetro
media_learning_rate <- mean(mi_dataset$learning_rate)
media_feature_fraction <- mean(mi_dataset$feature_fraction)
media_num_leaves <- mean(mi_dataset$num_leaves)
media_min_data_in_leaf <- mean(mi_dataset$min_data_in_leaf)
# Definir la tolerancia para la comparación (por ejemplo, 0.01 para una tolerancia del 1%)
tolerancia <- 0.01
# Buscar las filas que contienen valores aproximados a la media de cada parámetro
fila_media_learning_rate <- which(near(mi_dataset$learning_rate, media_learning_rate, tol = tolerancia))
fila_media_feature_fraction <- which(near(mi_dataset$feature_fraction, media_feature_fraction, tol = tolerancia))
fila_media_num_leaves <- which(near(mi_dataset$num_leaves, media_num_leaves, tol = 14))
fila_media_min_data_in_leaf <- which(near(mi_dataset$min_data_in_leaf, media_min_data_in_leaf, tol = 31))
# Imprimir los resultados
print(paste("Fila con valor aproximado a la media de learning_rate:", fila_media_learning_rate))
print(paste("Fila con valor aproximado a la media de feature_fraction:", fila_media_feature_fraction))
print(paste("Fila con valor aproximado a la media de num_leaves:", fila_media_num_leaves))
print(paste("Fila con valor aproximado a la media de min_data_in_leaf:", fila_media_min_data_in_leaf))
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
tolerancia2 <- 10
source("~/.active-rstudio-document")
tolerancia2 <- 100
source("~/.active-rstudio-document")
source("C:/MCD/Labo1/labo2023r/src/workflow-semillerio/Bo_puestos.R")
ggplot(mi_dataset, aes(x = learning_rate, y = ganancia)) +
geom_point() +
labs(title = "Ganancia en función de learning_rate",
y = "Ganancia",
x = "Learning Rate",
color = "Ganancia")
ggplot(mi_dataset, aes(x = feature_fraction, y = ganancia)) +
geom_point() +
labs(title = "Ganancia en función de feature_fraction",
y = "Ganancia",
x = "feature_fraction",
color = "Ganancia")
ggplot(mi_dataset, aes(x = num_leaves, y = ganancia)) +
geom_point() +
labs(title = "Ganancia en función de num_leaves",
y = "Ganancia",
x = "num_leaves",
color = "Ganancia")
ggplot(mi_dataset, aes(x = min_data_in_leaf, y = ganancia)) +
geom_point() +
labs(title = "Ganancia en función de min_data_in_leaf",
y = "Ganancia",
x = "min_data_in_leaf",
color = "Ganancia")
library(dplyr)
library(readr)
mi_dataset <- read_delim("bolog7510.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
#-----------------------------------------------------------------------------------------------------------------------
mi_dataset <- mi_dataset %>% arrange(desc(ganancia))%>% mutate(posicion = row_number())
# Ganancia más alta obtenida
max <- max(mi_dataset$ganancia)
# Ganancia mínima obtenida
min <- min(mi_dataset$ganancia)
#-----------------------------------------------------------------------------------------------------------------------
# Calcular la media de cada parámetro
media_learning_rate <- mean(mi_dataset$learning_rate)
media_feature_fraction <- mean(mi_dataset$feature_fraction)
media_num_leaves <- mean(mi_dataset$num_leaves)
media_min_data_in_leaf <- mean(mi_dataset$min_data_in_leaf)
# Definir la tolerancia para la comparación (por ejemplo, 0.01 para una tolerancia del 1%)
tolerancia <- 0.01
# Buscar las filas que contienen valores aproximados a la media de cada parámetro
fila_media_learning_rate <- which(near(mi_dataset$learning_rate, media_learning_rate, tol = tolerancia))
fila_media_feature_fraction <- which(near(mi_dataset$feature_fraction, media_feature_fraction, tol = tolerancia))
fila_media_num_leaves <- which(near(mi_dataset$num_leaves, media_num_leaves, tol = 14))
fila_media_min_data_in_leaf <- which(near(mi_dataset$min_data_in_leaf, media_min_data_in_leaf, tol = 31))
# Imprimir los resultados
print(paste("Fila con valor aproximado a la media de learning_rate:", fila_media_learning_rate))
print(paste("Fila con valor aproximado a la media de feature_fraction:", fila_media_feature_fraction))
print(paste("Fila con valor aproximado a la media de num_leaves:", fila_media_num_leaves))
print(paste("Fila con valor aproximado a la media de min_data_in_leaf:", fila_media_min_data_in_leaf))
#------------------------------------------------------------------------------
# Función para generar los gráficos de dispersión
graficos_ganancia <- function(dataset) {
ggplot(dataset) +
geom_point(aes(x = learning_rate, y = ganancia, color = ganancia)) +
labs(title = "Ganancia en función de learning_rate",
y = "Ganancia",
x = "Learning Rate",
color = "Ganancia") +
facet_wrap(~feature_fraction, ncol = 2) +
theme_minimal()
ggplot(dataset) +
geom_point(aes(x = feature_fraction, y = ganancia, color = ganancia)) +
labs(title = "Ganancia en función de feature_fraction",
y = "Ganancia",
x = "feature_fraction",
color = "Ganancia") +
facet_wrap(~feature_fraction, ncol = 2) +
theme_minimal()
ggplot(dataset) +
geom_point(aes(x = num_leaves, y = ganancia, color = ganancia)) +
labs(title = "Ganancia en función de num_leaves",
y = "Ganancia",
x = "num_leaves",
color = "Ganancia") +
facet_wrap(~feature_fraction, ncol = 2) +
theme_minimal()
ggplot(dataset) +
geom_point(aes(x = min_data_in_leaf, y = ganancia, color = ganancia)) +
labs(title = "Ganancia en función de min_data_in_leaf",
y = "Ganancia",
x = "min_data_in_leaf",
color = "Ganancia") +
facet_wrap(~feature_fraction, ncol = 2) +
theme_minimal()
}
# Llamada a la función para generar los gráficos
graficos_ganancia(mi_dataset)
# Llamada a la función para generar los gráficos
graficos_ganancia(mi_dataset)
source("C:/MCD/Labo1/labo2023r/src/workflow-semillerio/Bo_puestos2.R")
mi_dataset <- mi_dataset %>% arrange(desc(ganancia))%>% mutate(posicion = row_number())
library(dplyr)
library(readr)
mi_dataset <- read_delim("bolog7511.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
#-----------------------------------------------------------------------------------------------------------------------
mi_dataset <- mi_dataset %>% arrange(desc(ganancia))%>% mutate(posicion = row_number())
# Ganancia más alta obtenida
max <- max(mi_dataset$ganancia)
# Ganancia mínima obtenida
min <- min(mi_dataset$ganancia)
media_learning_rate <- mean(mi_dataset$learning_rate)
media_feature_fraction <- mean(mi_dataset$feature_fraction)
media_num_leaves <- mean(mi_dataset$num_leaves)
media_min_data_in_leaf <- mean(mi_dataset$min_data_in_leaf)
# Definir la tolerancia para la comparación (por ejemplo, 0.01 para una tolerancia del 1%)
tolerancia <- 0.01
# Buscar las filas que contienen valores aproximados a la media de cada parámetro
fila_media_learning_rate <- which(near(mi_dataset$learning_rate, media_learning_rate, tol = tolerancia))
View(mi_dataset)
source("C:/MCD/Labo1/labo2023r/src/workflow-semillerio/Bo_puestos2.R")
# Gráfico de dispersión para ver la ganancia en función de learning_rate y feature_fraction
ggplot(mi_dataset, aes(x = learning_rate, y = ganancia)) +
geom_point() +
labs(title = "Ganancia en función de learning_rate",
y = "Ganancia",
x = "Learning Rate",
color = "Ganancia")
# Gráfico de dispersión para ver la ganancia en función de feature_fraction
ggplot(mi_dataset, aes(x = feature_fraction, y = ganancia)) +
geom_point() +
labs(title = "Ganancia en función de feature_fraction",
y = "Ganancia",
x = "feature_fraction",
color = "Ganancia")
# Gráfico de dispersión para ver la ganancia en función de num_leaves
ggplot(mi_dataset, aes(x = num_leaves, y = ganancia)) +
geom_point() +
labs(title = "Ganancia en función de num_leaves",
y = "Ganancia",
x = "num_leaves",
color = "Ganancia")
ggplot(mi_dataset, aes(x = min_data_in_leaf, y = ganancia)) +
geom_point() +
labs(title = "Ganancia en función de min_data_in_leaf",
y = "Ganancia",
x = "min_data_in_leaf",
color = "Ganancia")
source("C:/MCD/Labo1/labo2023r/src/workflow-semillerio/Bo_puestos2.R")
source("C:/MCD/Labo1/labo2023r/src/workflow-semillerio/781_ZZ_semillerios_hibridacion.r")
