dataset <- fread(PARAM$dataset)
PARAM$dataset <- "./scr/workflow-semillerio/dataset_pequeno.csv"
# cargo el dataset
dataset <- fread(PARAM$dataset)
# cargo el dataset
dataset <- fread(PARAM$dataset)
PARAM$dataset <- "./src/workflow-semillerio/dataset_pequeño.csv"
# cargo el dataset
dataset <- fread(PARAM$dataset)
PARAM$dataset <- ".src/workflow-semillerio/dataset_pequeño.csv"
# cargo el dataset
dataset <- fread(PARAM$dataset)
PARAM$dataset <- ".src/workflow-semillerio/dataset_pequeno.csv"
# cargo el dataset
dataset <- fread(PARAM$dataset)
setwd("C:/MCD/Labo1/labo2023r/src/workflow-semillerio")
# cargo el dataset
dataset <- fread(PARAM$dataset)
PARAM$dataset <- "/dataset_pequeno.csv"
# cargo el dataset
dataset <- fread(PARAM$dataset)
View(PARAM)
PARAM$dataset <- "~/dataset_pequeno.csv"
# cargo el dataset
dataset <- fread(PARAM$dataset)
getwd()=='C:/MCD/Labo1/labo2023r/src/workflow-semillerio'
# cargo el dataset
dataset <- fread(dataset_pequeno.csv)
# cargo el dataset
dataset <- fread(/dataset_pequeno.csv)
# cargo el dataset
dataset <- fread("/dataset_pequeno.csv")
list.files(wd)
list.files()
# cargo el dataset
dataset <- fread("dataset_pequeno.csv")
PARAM$dataset <- "dataset_pequeno.csv"
# cargo el dataset
dataset <- fread(PARAM$dataset)
View(PARAM)
num_na_por_columna <- colSums(is.na(dataset))
print(num_na_por_columna)
columnas_con_na <- names(num_na_por_columna[num_na_por_columna > 0])
print(columnas_con_na)
source("~/labo2023r/src/workflow-semillerio/731_FE_historia.r")
bo <- read.delim("C:/MCD/Labo1/labo2023r/bo.txt", header=FALSE)
View(bo)
bo <- read.delim2("C:/MCD/Labo1/labo2023r/bo.txt", row.names=1)
View(bo)
bo <- read.delim2("C:/MCD/Labo1/labo2023r/bo.txt", header=FALSE, row.names=1)
View(bo)
bo <- read.csv("C:/MCD/Labo1/labo2023r/bo.txt", row.names=1)
View(bo)
bo <- read.delim("C:/MCD/Labo1/labo2023r/bo.txt", header=FALSE, row.names=1)
View(bo)
bo <- read.delim2("C:/MCD/Labo1/labo2023r/bo.txt", header=FALSE, row.names=1)
View(bo)
library(readr)
bo <- read_delim("bo.txt", delim = "\t",
escape_double = FALSE, trim_ws = TRUE)
View(bo)
library(readr)
BO_log_HT7512 <- read_delim("bo.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
View(BO_log_HT7512)
View(bo)
library(readr)
BO_log_HT7510 <- read_delim("bo.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
View(BO_log_HT7510)
#-----------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------
library(dplyr)
BO_gcia_descendente <- BO_log_HT7510 %>% arrange(desc(ganancia))
# Ganancia más alta obtenida
maximo <- max(BO_gcia_descendente$ganancia)
maximo
posicion_ranking <- which(BO_gcia_descendente$ganancia == maximo)
posicion_ranking
# Ganancia mínima obtenida
minimo <- min(BO_gcia_descendente$ganancia)
minimo
posicion_ranking <- which(BO_gcia_descendente$ganancia == minimo)
posicion_ranking
#-----------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------
# Qué puesto ocupa la ganancia = 66.976.514
iteracion <- 16 # lo busco por N° de iteración dado que no reconoce la ganancia por los decimales, solución más simple
posicion_ranking <- which(BO_gcia_descendente$iteracion_bayesiana == 16)
posicion_ranking
# Resultado = 54, elijo éste por la cantidad de árboles
#-----------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------
# Qué puesto ocupa la ganancia = 67.896.919
iteracion <- 8 # lo busco por N° de iteración dado que no reconoce la ganancia por los decimales, solución más simple
posicion_ranking <- which(BO_gcia_descendente$iteracion_bayesiana == 8)
posicion_ranking
# Resultado = 47
library(readr)
BO_log_HT7510 <- read_delim("bo.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
View(BO_log_HT7510)
library(readr)
BO_log_HT7510 <- read_delim("bo.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
View(BO_log_HT7510)
#-----------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------
library(dplyr)
BO_gcia_descendente <- BO_log_HT7510 %>% arrange(desc(ganancia))
# Ganancia más alta obtenida
maximo <- max(BO_gcia_descendente$ganancia)
maximo
posicion_ranking <- which(BO_gcia_descendente$ganancia == maximo)
posicion_ranking
# Ganancia mínima obtenida
minimo <- min(BO_gcia_descendente$ganancia)
minimo
posicion_ranking <- which(BO_gcia_descendente$ganancia == minimo)
posicion_ranking
#-----------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------
# Qué puesto ocupa la ganancia = 66.976.514
iteracion <- 16 # lo busco por N° de iteración dado que no reconoce la ganancia por los decimales, solución más simple
posicion_ranking <- which(BO_gcia_descendente$iteracion_bayesiana == 16)
posicion_ranking
# Resultado = 54, elijo éste por la cantidad de árboles
#-----------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------
# Qué puesto ocupa la ganancia = 67.896.919
iteracion <- 8 # lo busco por N° de iteración dado que no reconoce la ganancia por los decimales, solución más simple
posicion_ranking <- which(BO_gcia_descendente$iteracion_bayesiana == 8)
posicion_ranking
# Resultado = 47
# Cargamos el dataset o lo creamos si aún no está cargado
# mi_dataset <- read.csv("nombre_del_archivo.csv")  # Si los datos vienen desde un archivo CSV
# Obtenemos un resumen estadístico de los datos
summary(BO_log_HT7510$learning_rate)
summary(BO_log_HT7510$feature_fraction)
summary(BO_log_HT7510$num_leaves)
summary(BO_log_HT7510$min_data_in_leaf)
library(readr)
mi_dataset <- read_delim("bo.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
View(BO_log_HT7510)
#-----------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------
library(dplyr)
BO_gcia_descendente <- mi_dataset %>% arrange(desc(ganancia))
# Ganancia más alta obtenida
maximo <- max(BO_gcia_descendente$ganancia)
maximo
posicion_ranking <- which(BO_gcia_descendente$ganancia == maximo)
posicion_ranking
# Ganancia mínima obtenida
minimo <- min(BO_gcia_descendente$ganancia)
minimo
posicion_ranking <- which(BO_gcia_descendente$ganancia == minimo)
posicion_ranking
#-----------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------
# Qué puesto ocupa la ganancia = 66.976.514
iteracion <- 16 # lo busco por N° de iteración dado que no reconoce la ganancia por los decimales, solución más simple
posicion_ranking <- which(BO_gcia_descendente$iteracion_bayesiana == 16)
posicion_ranking
# Resultado = 54, elijo éste por la cantidad de árboles
#-----------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------
# Qué puesto ocupa la ganancia = 67.896.919
iteracion <- 8 # lo busco por N° de iteración dado que no reconoce la ganancia por los decimales, solución más simple
posicion_ranking <- which(BO_gcia_descendente$iteracion_bayesiana == 8)
posicion_ranking
# Resultado = 47
# Cargamos el dataset o lo creamos si aún no está cargado
# mi_dataset <- read.csv("nombre_del_archivo.csv")  # Si los datos vienen desde un archivo CSV
# Supongamos que tienes el dataset cargado en una variable llamada mi_dataset
# Calcular la media de cada parámetro
media_learning_rate <- mean(mi_dataset$learning_rate)
media_feature_fraction <- mean(mi_dataset$feature_fraction)
media_num_leaves <- mean(mi_dataset$num_leaves)
media_min_data_in_leaf <- mean(mi_dataset$min_data_in_leaf)
# Buscar las filas que contienen la media de cada parámetro
fila_media_learning_rate <- which(mi_dataset$learning_rate == media_learning_rate)
fila_media_feature_fraction <- which(mi_dataset$feature_fraction == media_feature_fraction)
fila_media_num_leaves <- which(mi_dataset$num_leaves == media_num_leaves)
fila_media_min_data_in_leaf <- which(mi_dataset$min_data_in_leaf == media_min_data_in_leaf)
# Imprimir los resultados
print(paste("Fila con la media de learning_rate:", fila_media_learning_rate))
print(paste("Fila con la media de feature_fraction:", fila_media_feature_fraction))
print(paste("Fila con la media de num_leaves:", fila_media_num_leaves))
print(paste("Fila con la media de min_data_in_leaf:", fila_media_min_data_in_leaf))
library(readr)
mi_dataset <- read_delim("bo.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
#-----------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------
library(dplyr)
BO_gcia_descendente <- mi_dataset %>% arrange(desc(ganancia))
library(dplyr)
BO_gcia_descendente <- mi_dataset %>% arrange(desc(ganancia))
# Ganancia más alta obtenida
maximo <- max(BO_gcia_descendente$ganancia)
maximo
posicion_ranking <- which(BO_gcia_descendente$ganancia == maximo)
posicion_ranking
# Ganancia mínima obtenida
minimo <- min(BO_gcia_descendente$ganancia)
minimo
posicion_ranking <- which(BO_gcia_descendente$ganancia == minimo)
posicion_ranking
#-----------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------
# Qué puesto ocupa la ganancia = 66.976.514
iteracion <- 16 # lo busco por N° de iteración dado que no reconoce la ganancia por los decimales, solución más simple
posicion_ranking <- which(BO_gcia_descendente$iteracion_bayesiana == 16)
posicion_ranking
# Resultado = 54, elijo éste por la cantidad de árboles
#-----------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------
# Qué puesto ocupa la ganancia = 67.896.919
iteracion <- 8 # lo busco por N° de iteración dado que no reconoce la ganancia por los decimales, solución más simple
posicion_ranking <- which(BO_gcia_descendente$iteracion_bayesiana == 8)
posicion_ranking
media_learning_rate <- mean(mi_dataset$learning_rate)
media_feature_fraction <- mean(mi_dataset$feature_fraction)
media_num_leaves <- mean(mi_dataset$num_leaves)
media_min_data_in_leaf <- mean(mi_dataset$min_data_in_leaf)
fila_media_learning_rate <- which(mi_dataset$learning_rate == media_learning_rate)
fila_media_feature_fraction <- which(mi_dataset$feature_fraction == media_feature_fraction)
fila_media_num_leaves <- which(mi_dataset$num_leaves == media_num_leaves)
fila_media_min_data_in_leaf <- which(mi_dataset$min_data_in_leaf == media_min_data_in_leaf)
print(paste("Fila con la media de learning_rate:", fila_media_learning_rate))
print(paste("Fila con la media de feature_fraction:", fila_media_feature_fraction))
print(paste("Fila con la media de num_leaves:", fila_media_num_leaves))
print(paste("Fila con la media de min_data_in_leaf:", fila_media_min_data_in_leaf))
fila_media_feature_fraction
fila_media_min_data_in_leaf <- which(mi_dataset$min_data_in_leaf == media_min_data_in_leaf)
print(fila_media_learning_rate)
which(mi_dataset$learning_rate == media_learning_rate)
media_learning_rate <- mean(mi_dataset$learning_rate)
media_feature_fraction <- mean(mi_dataset$feature_fraction)
media_num_leaves <- mean(mi_dataset$num_leaves)
media_min_data_in_leaf <- mean(mi_dataset$min_data_in_leaf)
# Definir la tolerancia para la comparación (por ejemplo, 0.01 para una tolerancia del 1%)
tolerancia <- 0.01
# Buscar las filas que contienen valores aproximados a la media de cada parámetro
fila_media_learning_rate <- which(near(mi_dataset$learning_rate, media_learning_rate, tol = tolerancia))
fila_media_feature_fraction <- which(near(mi_dataset$feature_fraction, media_feature_fraction, tol = tolerancia))
fila_media_num_leaves <- which(near(mi_dataset$num_leaves, media_num_leaves, tol = tolerancia))
fila_media_min_data_in_leaf <- which(near(mi_dataset$min_data_in_leaf, media_min_data_in_leaf, tol = tolerancia))
# Imprimir los resultados
print(paste("Fila con valor aproximado a la media de learning_rate:", fila_media_learning_rate))
print(paste("Fila con valor aproximado a la media de feature_fraction:", fila_media_feature_fraction))
print(paste("Fila con valor aproximado a la media de num_leaves:", fila_media_num_leaves))
print(paste("Fila con valor aproximado a la media de min_data_in_leaf:", fila_media_min_data_in_leaf))
View(mi_dataset)
print(paste("Fila con valor aproximado a la media de min_data_in_leaf:", fila_media_min_data_in_leaf))
list(wd)
list.files(wd)
list.files()
list.files("src")
list.files("workflow-semillerio")
list.files("workflow-semillerio")
list.files("src/workflow-inicial/")
> list.files("src/workflow-semillerio/")
> list.files("src/workflow-semillerio/")
list.files("src/workflow-semillerio/")
library(readr)
mi_dataset <- read_delim("bolog7511.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
library(readr)
mi_dataset <- read_delim("bolog7511.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
#-----------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------
library(dplyr)
BO_gcia_descendente <- mi_dataset %>% arrange(desc(ganancia))
# Ganancia más alta obtenida
maximo <- max(BO_gcia_descendente$ganancia)
maximo
posicion_ranking <- which(BO_gcia_descendente$ganancia == maximo)
posicion_ranking
# Ganancia mínima obtenida
minimo <- min(BO_gcia_descendente$ganancia)
minimo
posicion_ranking <- which(BO_gcia_descendente$ganancia == minimo)
posicion_ranking
#-----------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------
# Qué puesto ocupa la ganancia = 66.976.514
iteracion <- 16 # lo busco por N° de iteración dado que no reconoce la ganancia por los decimales, solución más simple
posicion_ranking <- which(BO_gcia_descendente$iteracion_bayesiana == 16)
posicion_ranking
# Resultado = 54, elijo éste por la cantidad de árboles
#-----------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------
# Qué puesto ocupa la ganancia = 67.896.919
iteracion <- 8 # lo busco por N° de iteración dado que no reconoce la ganancia por los decimales, solución más simple
posicion_ranking <- which(BO_gcia_descendente$iteracion_bayesiana == 8)
posicion_ranking
# Resultado = 47
# Cargamos el dataset o lo creamos si aún no está cargado
# mi_dataset <- read.csv("nombre_del_archivo.csv")  # Si los datos vienen desde un archivo CSV
# Supongamos que tienes el dataset cargado en una variable llamada mi_dataset
# Instala el paquete dplyr si aún no lo tienes instalado
# install.packages("dplyr")
# Cargar el paquete dplyr
library(dplyr)
# Supongamos que tienes el dataset cargado en una variable llamada mi_dataset
# Calcular la media de cada parámetro
media_learning_rate <- mean(mi_dataset$learning_rate)
media_feature_fraction <- mean(mi_dataset$feature_fraction)
media_num_leaves <- mean(mi_dataset$num_leaves)
media_min_data_in_leaf <- mean(mi_dataset$min_data_in_leaf)
# Definir la tolerancia para la comparación (por ejemplo, 0.01 para una tolerancia del 1%)
tolerancia <- 0.01
# Buscar las filas que contienen valores aproximados a la media de cada parámetro
fila_media_learning_rate <- which(near(mi_dataset$learning_rate, media_learning_rate, tol = tolerancia))
fila_media_feature_fraction <- which(near(mi_dataset$feature_fraction, media_feature_fraction, tol = tolerancia))
fila_media_num_leaves <- which(near(mi_dataset$num_leaves, media_num_leaves, tol = tolerancia))
fila_media_min_data_in_leaf <- which(near(mi_dataset$min_data_in_leaf, media_min_data_in_leaf, tol = tolerancia))
# Imprimir los resultados
print(paste("Fila con valor aproximado a la media de learning_rate:", fila_media_learning_rate))
print(paste("Fila con valor aproximado a la media de feature_fraction:", fila_media_feature_fraction))
print(paste("Fila con valor aproximado a la media de num_leaves:", fila_media_num_leaves))
print(paste("Fila con valor aproximado a la media de min_data_in_leaf:", fila_media_min_data_in_leaf))
library(readr)
mi_dataset <- read_delim("bo.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
#-----------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------
library(dplyr)
BO_gcia_descendente <- mi_dataset %>% arrange(desc(ganancia))
# Ganancia más alta obtenida
maximo <- max(BO_gcia_descendente$ganancia)
maximo
posicion_ranking <- which(BO_gcia_descendente$ganancia == maximo)
posicion_ranking
# Ganancia mínima obtenida
minimo <- min(BO_gcia_descendente$ganancia)
minimo
posicion_ranking <- which(BO_gcia_descendente$ganancia == minimo)
posicion_ranking
#-----------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------
# Qué puesto ocupa la ganancia = 66.976.514
iteracion <- 16 # lo busco por N° de iteración dado que no reconoce la ganancia por los decimales, solución más simple
posicion_ranking <- which(BO_gcia_descendente$iteracion_bayesiana == 16)
posicion_ranking
# Resultado = 54, elijo éste por la cantidad de árboles
#-----------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------
# Qué puesto ocupa la ganancia = 67.896.919
iteracion <- 8 # lo busco por N° de iteración dado que no reconoce la ganancia por los decimales, solución más simple
posicion_ranking <- which(BO_gcia_descendente$iteracion_bayesiana == 8)
posicion_ranking
# Resultado = 47
# Cargamos el dataset o lo creamos si aún no está cargado
# mi_dataset <- read.csv("nombre_del_archivo.csv")  # Si los datos vienen desde un archivo CSV
# Supongamos que tienes el dataset cargado en una variable llamada mi_dataset
# Instala el paquete dplyr si aún no lo tienes instalado
# install.packages("dplyr")
# Cargar el paquete dplyr
library(dplyr)
# Supongamos que tienes el dataset cargado en una variable llamada mi_dataset
# Calcular la media de cada parámetro
media_learning_rate <- mean(mi_dataset$learning_rate)
media_feature_fraction <- mean(mi_dataset$feature_fraction)
media_num_leaves <- mean(mi_dataset$num_leaves)
media_min_data_in_leaf <- mean(mi_dataset$min_data_in_leaf)
# Definir la tolerancia para la comparación (por ejemplo, 0.01 para una tolerancia del 1%)
tolerancia <- 0.01
# Buscar las filas que contienen valores aproximados a la media de cada parámetro
fila_media_learning_rate <- which(near(mi_dataset$learning_rate, media_learning_rate, tol = tolerancia))
fila_media_feature_fraction <- which(near(mi_dataset$feature_fraction, media_feature_fraction, tol = tolerancia))
fila_media_num_leaves <- which(near(mi_dataset$num_leaves, media_num_leaves, tol = tolerancia))
fila_media_min_data_in_leaf <- which(near(mi_dataset$min_data_in_leaf, media_min_data_in_leaf, tol = tolerancia))
# Imprimir los resultados
print(paste("Fila con valor aproximado a la media de learning_rate:", fila_media_learning_rate))
print(paste("Fila con valor aproximado a la media de feature_fraction:", fila_media_feature_fraction))
print(paste("Fila con valor aproximado a la media de num_leaves:", fila_media_num_leaves))
print(paste("Fila con valor aproximado a la media de min_data_in_leaf:", fila_media_min_data_in_leaf))
# Gráfico de dispersión para ver la ganancia en función de learning_rate y feature_fraction
ggplot(mi_dataset, aes(x = learning_rate, y = feature_fraction, color = ganancia)) +
geom_point() +
labs(title = "Ganancia en función de learning_rate y feature_fraction",
x = "Learning Rate",
y = "Feature Fraction",
color = "Ganancia")
# Cargar el paquete ggplot2
library(ggplot2)
ggplot(mi_dataset, aes(x = learning_rate, y = feature_fraction, color = ganancia)) +
geom_point() +
labs(title = "Ganancia en función de learning_rate y feature_fraction",
x = "Learning Rate",
y = "Feature Fraction",
color = "Ganancia")
ggplot(mi_dataset, aes(x = learning_rate, y = ganancia)) +
geom_point() +
labs(title = "Ganancia en función de learning_rate y feature_fraction",
x = "Learning Rate",
y = "Feature Fraction",
color = "Ganancia")
ggplot(mi_dataset, aes(x = learning_rate, y = ganancia)) +
geom_point() +
labs(title = "Ganancia en función de learning_rate",
x = "Ganancia",
y = "Learning Rate",
color = "Ganancia")
ggplot(mi_dataset, aes(x = learning_rate, y = ganancia)) +
geom_point() +
labs(title = "Ganancia en función de learning_rate",
y = "Ganancia",
x = "Learning Rate",
color = "Ganancia")
ggplot(mi_dataset, aes(x = num_leaves, y = min_data_in_leaf, z = ganancia)) +
geom_contour() +
labs(title = "Ganancia en función de num_leaves y min_data_in_leaf",
x = "Num Leaves",
y = "Min Data in Leaf",
z = "Ganancia")
ggplot(mi_dataset, aes(x = num_leaves, y = min_data_in_leaf, z = ganancia)) +
geom_contour() +
labs(title = "Ganancia en función de num_leaves y min_data_in_leaf",
x = "Num Leaves",
# Gráfico de dispersión para ver la ganancia en función de feature_fraction
ggplot(mi_dataset, aes(x = feature_fraction, y = ganancia)) +
geom_point() +
labs(title = "Ganancia en función de feature_fraction",
y = "Ganancia",
x = "feature_fraction",
color = "Ganancia")
ggplot(mi_dataset, aes(x = learning_rate, y = ganancia)) +
ggplot(mi_dataset, aes(x = learning_rate, y = ganancia)) +
geom_point() +
labs(title = "Ganancia en función de learning_rate",
y = "Ganancia",
x = "Learning Rate",
color = "Ganancia")
ggplot(mi_dataset, aes(x = learning_rate, y = ganancia)) +
geom_point() +
labs(title = "Ganancia en función de learning_rate",
y = "Ganancia",
x = "Learning Rate",
color = "Ganancia")
ggplot(mi_dataset, aes(x = feature_fraction, y = ganancia)) +
geom_point() +
labs(title = "Ganancia en función de feature_fraction",
y = "Ganancia",
x = "feature_fraction",
color = "Ganancia")
# Gráfico de dispersión para ver la ganancia en función de num_leaves
ggplot(mi_dataset, aes(x = num_leaves, y = ganancia)) +
geom_point() +
labs(title = "Ganancia en función de num_leaves",
y = "Ganancia",
x = "num_leaves",
color = "Ganancia")
# Gráfico de dispersión para ver la ganancia en función de min_data_in_leaf
ggplot(mi_dataset, aes(x = min_data_in_leaf, y = ganancia)) +
geom_point() +
labs(title = "Ganancia en función de min_data_in_leaf",
y = "Ganancia",
x = "min_data_in_leaf",
color = "Ganancia")
View(BO_gcia_descendente)
library(readr)
library(dplyr)
mi_dataset <- read_delim("bo.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
#---------------------------------------------
library(readr)
library(dplyr)
mi_dataset <- read_delim("bo.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
library(readr)
library(dplyr)
mi_dataset <- read_delim("bo.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE,
show_col_types = FALSE)
library(readr)
library(dplyr)
mi_dataset <- read_delim("bo.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE,
show_col_types = FALSE)
library(readr)
library(dplyr)
mi_dataset <- read_delim("bolog7510.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE,
show_col_types = FALSE)
library(dplyr)
library(readr)
mi_dataset <- read_delim("bolog7510.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
View(mi_dataset)
mi_dataset <- mi_dataset %>% arrange(desc(ganancia))
View(mi_dataset)
